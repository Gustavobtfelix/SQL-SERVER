/*
SUM = Soma
MAX = máximo
MIN = Mínimo
AVG = Média
COUNT = Conta quantidade de ocorrências

GROUP BY = agregador (normal ascendente) que é usado para auxiliar funções. É necessario que a coluna esteja no Select
HAVING = Transforma o resultado de uma função em uma condicional

SELECT <CONFIÇÃO>
CASE
	WHEN	<CONDIÇÃO>	THEN <NOME_COLUNA>
	ELSE	<NOME_COLUNA
END
FROM <NOME DA TABELA>
*/

SELECT ESTADO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] GROUP BY ESTADO

SELECT ESTADO, AVG([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] GROUP BY ESTADO

SELECT EMBALAGEM, MAX([PREÇO DE LISTA]) FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM

SELECT EMBALAGEM, MIN([PREÇO DE LISTA]) FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM

SELECT EMBALAGEM, COUNT(*) FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM

SELECT COUNT(*) FROM [TABELA DE PRODUTOS] 

SELECT YEAR(DATA), COUNT(*) FROM [NOTAS FISCAIS] GROUP BY YEAR(DATA)

SELECT BAIRRO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] WHERE [ESTADO]  = 'SP' GROUP BY BAIRRO ORDER BY BAIRRO DESC

SELECT BAIRRO, ESTADO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] WHERE [ESTADO]  = 'SP' GROUP BY BAIRRO, ESTADO

--                   
SELECT TOP 10 * FROM [TABELA DE CLIENTES]

SELECT ESTADO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] GROUP BY ESTADO --MOSTRA A SOMA DE CREDITOS DE RJ E SP
HAVING SUM([LIMITE DE CREDITO]) >= 850000

SELECT TOP 10 * FROM [TABELA DE PRODUTOS]

SELECT EMBALAGEM, SUM([PREÇO DE LISTA]) AS 'SOMA', MAX([PREÇO DE LISTA]) AS 'MAX', MIN([PREÇO DE LISTA]) AS 'MIN' FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM -- MOSTRA A SOM MAX E MIN DO PREÇO
HAVING SUM([PREÇO DE LISTA]) <= 80 AND MAX([PREÇO DE LISTA]) >= 6

--

SELECT TOP 10 * FROM [TABELA DE PRODUTOS]

SELECT [NOME], [DATA DE NASCIMENTO],
CASE
	WHEN YEAR([DATA DE NASCIMENTO]) < 1990 THEN 'Adultos'
	WHEN YEAR([DATA DE NASCIMENTO]) BETWEEN 1990 AND 1995 THEN 'Jovem'
	ELSE 'Crianças'
END
FROM [TABELA DE CLIENTES]

SELECT [NOME DO PRODUTO],
CASE
	WHEN [PREÇO DE LISTA] >= 12 THEN 'PRODUTO CARO'
	WHEN [PREÇO DE LISTA] < 12 AND [PREÇO DE LISTA] >= 7 THEN 'PRODUTO EM CONTA'
	ELSE 'PRODUTO BARATO' 
END,
AVG([PREÇO DE LISTA]) AS 'PRECO'
FROM [TABELA DE PRODUTOS]
GROUP BY [NOME DO PRODUTO],  
CASE				--	Necessaria repetição do case que foi feito acima para o group by funcionar
	WHEN [PREÇO DE LISTA] >= 12 THEN 'PRODUTO CARO'
	WHEN [PREÇO DE LISTA] < 12 AND [PREÇO DE LISTA] >= 7 THEN 'PRODUTO EM CONTA'
	ELSE 'PRODUTO BARATO'
END

/*			-/-			-/-			-/-			-/-			-/-			-/-			-/-

JOINS  -  METODOS PARA JUNTAR 2 TABELAS EM UMA
	INNER JOIN, LEFT AND RIGHT JOIN, FULL JOIN, CROSS JOIN, UNION.

INNER JOIN
Pega os valores que existem nas 2 tabelas

SELECT * FROM
TAB1 INNER JOINT TAB2 ON TAB1.COD = TAB2.COD
*/

SELECT * FROM [TABELA DE VENDEDORES]

SELECT * FROM [NOTAS FISCAIS]

SELECT * FROM [ITENS NOTAS FISCAIS]

SELECT * FROM [TABELA DE VENDEDORES] INNER JOIN 
[NOTAS FISCAIS] ON [TABELA DE VENDEDORES].MATRICULA = [NOTAS FISCAIS].MATRICULA

SELECT * FROM [TABELA DE VENDEDORES] A INNER JOIN 
[NOTAS FISCAIS] B ON A.MATRICULA = B.MATRICULA

SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA) AS 'ANO', 
COUNT(*) AS 'VENDAS' FROM [TABELA DE VENDEDORES] INNER JOIN 
[NOTAS FISCAIS] ON [TABELA DE VENDEDORES].MATRICULA = [NOTAS FISCAIS].MATRICULA
GROUP BY [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA) ORDER BY YEAR(DATA), [TABELA DE VENDEDORES].[NOME]

		--NOTAS FISCAIS           //              ,NOTAS FISCAIS * ITENS NOTAS FISCAIS
SELECT YEAR(DATA) AS 'ANO',COUNT(*) AS 'Q. VENDAS', SUM(QUANTIDADE * PREÇO) AS 'LUCRO' FROM [NOTAS FISCAIS] INNER JOIN
[ITENS NOTAS FISCAIS] ON [NOTAS FISCAIS].NUMERO = [ITENS NOTAS FISCAIS].NUMERO
GROUP BY YEAR(DATA) ORDER BY ANO

SELECT * FROM [TABELA DE VENDEDORES] INNER JOIN 
[NOTAS FISCAIS] NF ON [TABELA DE VENDEDORES].MATRICULA = NF.MATRICULA

SELECT * FROM [TABELA DE VENDEDORES], [NOTAS FISCAIS]
WHERE [TABELA DE VENDEDORES].MATRICULA = [NOTAS FISCAIS].MATRICULA


/*		-/-			-/-			-/-			-/-			-/-			-/-			-/-

LEFT AND RIGHT JOIN  
LEFT JOIN = JUNTA COM A TABELA DA DIREITA SOMENTE NOS VALORES QUE EXISTEM NA TABELA DA ESQUERDA
RIGHT JOIN = JUNTA COM A TABELA DA ESQUERDA SOMENTE NOS VALORES QUE EXISTEM NA TABELA DA  DIREITA
*/
--SELECT * FROM [TABELA DE CLIENTES]

SELECT [TABELA DE CLIENTES].[NOME], COUNT(*) FROM [TABELA DE CLIENTES] INNER JOIN 
[NOTAS FISCAIS] ON [TABELA DE CLIENTES].CPF = [NOTAS FISCAIS].CPF
GROUP BY [TABELA DE CLIENTES].[NOME]
--15 RESULTADOS
SELECT [TABELA DE CLIENTES].[NOME], COUNT(*) AS 'COMPRAS' FROM [TABELA DE CLIENTES] LEFT JOIN 
[NOTAS FISCAIS] ON [TABELA DE CLIENTES].CPF = [NOTAS FISCAIS].CPF
GROUP BY [TABELA DE CLIENTES].[NOME] ORDER BY NOME
--14 RESULTADOS
SELECT [TABELA DE CLIENTES].[CPF], [TABELA DE CLIENTES].[NOME], COUNT(*) FROM [TABELA DE CLIENTES] RIGHT JOIN 
[NOTAS FISCAIS] ON [TABELA DE CLIENTES].CPF = [NOTAS FISCAIS].CPF
GROUP BY  [TABELA DE CLIENTES].[CPF], [TABELA DE CLIENTES].[NOME]

--SELECT * FROM [NOTAS FISCAIS] WHERE CPF = '95939180787'

/* 		-/-			-/-			-/-			-/-			-/-			-/-			-/-

FULL AND CROSS JOIN
FULL JOIN = SELECIONA TODOS OS VALORES DAS 2 TABELAS
CROSS JOIN = JUNTA TABELAS E CLASSIFICA
*/

SELECT [TABELA DE VENDEDORES].BAIRRO, [TABELA DE VENDEDORES].[NOME],  
[TABELA DE CLIENTES].BAIRRO, [TABELA DE CLIENTES].[NOME] FROM
[TABELA DE VENDEDORES] FULL JOIN [TABELA DE CLIENTES] ON 
[TABELA DE VENDEDORES].BAIRRO = [TABELA DE CLIENTES].BAIRRO

SELECT [TABELA DE VENDEDORES].NOME, [TABELA DE VENDEDORES].BAIRRO, [TABELA DE CLIENTES].BAIRRO FROM
[TABELA DE VENDEDORES] CROSS JOIN [TABELA DE CLIENTES] 


/* 		-/-			-/-			-/-			-/-			-/-			-/-			-/-

UNION
UNION =JUNTA 2 SELECTS EM 1 COLUNA SEM JUNTAR VALORES REPETIDOS
UNION ALL = JUNTA COM VALORES REPETIDOS
*/

				--MOSTRA 11 RESULTADOS
SELECT DISTINCT [TABELA DE CLIENTES].BAIRRO FROM [TABELA DE CLIENTES]
UNION			--MOSTRA 4 RESULTADOS
SELECT DISTINCT [TABELA DE VENDEDORES].BAIRRO FROM [TABELA DE VENDEDORES]
				--MOSTRA 12 RESULTADOS

SELECT DISTINCT [TABELA DE CLIENTES].BAIRRO FROM [TABELA DE CLIENTES]
UNION ALL		--MOSTRA 4 RESULTADOS
SELECT DISTINCT [TABELA DE VENDEDORES].BAIRRO FROM [TABELA DE VENDEDORES]
				--MOSTRA 15 RESULTADOS

SELECT DISTINCT [TABELA DE CLIENTES].[BAIRRO], [TABELA DE CLIENTES].[NOME], 'CLIENTE' FROM [TABELA DE CLIENTES]
UNION ALL
SELECT DISTINCT [TABELA DE VENDEDORES].BAIRRO, [TABELA DE VENDEDORES].[NOME], 'VENDEDOR' FROM [TABELA DE VENDEDORES]

/*			-/-			-/-			-/-			-/-			-/-			-/-			-/-

SUB CONSULTAS   -   METODO PARA USAR OUTRAS CONSULTAS COMO BASE
*/
-- SELECIONA OS CLIENTES E BAIRROS
SELECT NOME, BAIRRO FROM [TABELA DE CLIENTES]

--SELECIONA SOMENTE OS CLIENTES QUE ESTÃO NOS BAIRROS EM QUE EXISTEM VENDEDORES
SELECT NOME, BAIRRO FROM [TABELA DE CLIENTES]
WHERE BAIRRO IN (SELECT BAIRRO FROM [TABELA DE VENDEDORES])

--CONSULTA OS MAIORES PREÇOS DE EMBALAGENS NA TABELA DE PRODUTOS
SELECT EMBALAGEM, MAX([PREÇO DE LISTA]) FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM

--USA A CONSULTA ANTERIOR COMO SUBCONSULTA PARA REALIZAR A COMPARAÇÃO <=   // PODERIA SER FEITO COM HAVING(MAX([PREÇO DE LISTA])) <= 5
SELECT NOVA_CONSULTA.EMBALAGEM, NOVA_CONSULTA.MAX_PRECO
FROM (SELECT EMBALAGEM, MAX([PREÇO DE LISTA]) AS MAX_PRECO FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM)
NOVA_CONSULTA
WHERE NOVA_CONSULTA.MAX_PRECO <= 5


/*			-/-			-/-			-/-			-/-			-/-			-/-			-/-

VIEWS
FUNCIONAM COMO TABELAS QUE SÃO CRIADAS DE CONSULTAS LOGICAS NO SQL
PARA CRIAR UMA VIEW VÁ EM BD > VIEWS > NEW VIEW

*/
		--ALIAS 
SELECT NOVA_CONSULTA.EMBALAGEM, NOVA_CONSULTA.MAX_PRECO
FROM (SELECT EMBALAGEM, MAX([PREÇO DE LISTA]) AS MAX_PRECO FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM) --SUB CONSULTA QUE PEGA O VALOR MAXIMO DE CADA EMBALAGEM
NOVA_CONSULTA --ALIAS
WHERE NOVA_CONSULTA.MAX_PRECO <= 5

-- SEPARADA PARA TRANSFORMAR NA VIEW VW_EMBALAGENS
SELECT EMBALAGEM, MAX([PREÇO DE LISTA]) AS MAX_PRECO FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM

SELECT * FROM [dbo].[VW_EMBALAGENS]

	--NOVA_CONSULTA = ALIAS, NÃO PRECISA SER UTILIZADO NESSE CASO
SELECT NOVA_CONSULTA.EMBALAGEM, NOVA_CONSULTA.MAX_PRECO
FROM VW_EMBALAGENS NOVA_CONSULTA --ALIAS
WHERE NOVA_CONSULTA.MAX_PRECO <= 5 --CONDICIONAL PRECO MENOR/IGUAL QUE 5



